<?php
/**
 * View to browse lists to select filter criteria by click
 * 
 * This file is part of OPUS. The software OPUS has been originally developed
 * at the University of Stuttgart with funding from the German Research Net,
 * the Federal Department of Higher Education and Research and the Ministry
 * of Science, Research and the Arts of the State of Baden-Wuerttemberg.
 *
 * OPUS 4 is a complete rewrite of the original OPUS software and was developed
 * by the Stuttgart University Library, the Library Service Center
 * Baden-Wuerttemberg, the Cooperative Library Network Berlin-Brandenburg,
 * the Saarland University and State Library, the Saxon State Library -
 * Dresden State and University Library, the Bielefeld University Library and
 * the University Library of Hamburg University of Technology with funding from
 * the German Research Foundation and the European Regional Development Fund.
 *
 * LICENCE
 * OPUS is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the Licence, or any later version.
 * OPUS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details. You should have received a copy of the GNU General Public License
 * along with OPUS; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * @category    Application
 * @package     Module_Search
 * @author      Oliver Marahrens <o.marahrens@tu-harburg.de>
 * @copyright   Copyright (c) 2008, OPUS 4 development team
 * @license     http://www.gnu.org/licenses/gpl.html General Public License
 * @version     $Id$
 */
	if ($this->list === "collection")
	{
		// Show name of the current CollectionNode
		//print_r($this->collectionNode->getCollectionNode());
		//print_r($this->collectionNode);
		//echo $this->collectionNode->getName();
	}
	echo "<ul>";
	while ($this->browsinglist->valid() === true)
	{
		$obj = $this->browsinglist->current();
		echo "<li>";
		if ($this->list === "authors")
		{
			$pers = $obj->get();
			echo "<a href=".$this->url(array("controller"=>"browsing", "action"=>"browseTitles", "filter" => "author", "author"=>$pers["id"])).">";
			echo $pers["lastName"].", ".$pers["firstName"];
			echo "</a>";
		}
		if ($this->list === "doctypes")
		{
			$pers = $obj->get();
			echo "<a href=".$this->url(array("controller"=>"browsing", "action"=>"browseTitles", "filter" => "doctype", "doctype"=>$pers["id"])).">";
			echo $pers["name"];
			echo "</a>";
		}
		if ($this->list === "collection")
		{
			// for Collections $this->browsinglist must be the ListIterator of all ChildNodes, not the current node itself... 
			echo "<a href=".$this->url(array("controller"=>"browsing", "action"=>"browseList", "list" => "collection", "collection"=>$obj->getRoleId(), "node" => $obj->getNodeId())).">";
			echo $obj->getName("ger");
			echo "</a> (".$obj->count().")";
		}
		// print_r($pers); // to have a look at all persons information
		echo "</li>";
		$this->browsinglist->next();
	}
	echo "</ul>";		
	if ($this->list === "collection")
	{
		if ($this->documentlist->getList()->count() > 0) echo "<h2>".$this->translate('search_category_documents')."</h2>";
		// look at the documents in this hierarchy
		while ($this->documentlist->valid() === true)
		{
			$doc = $this->documentlist->current();
			#print_r($obj);
			$data = $doc->getDocument();
			$authoriterator = new PersonsListIterator($data["author"]);
			#$data = $doc;
			while ($authoriterator->valid() === true)
			{
				$aut = $authoriterator->current();
				$pers = $aut->get();
				echo "<a href=".$this->url(array("controller"=>"browsing", "action"=>"browseTitles", "filter" => "author", "author"=>$pers["id"])).">";
				echo $pers["lastName"].", ".$pers["firstName"];
				echo "</a>";
				if ($authoriterator->hasNext() === true) echo "; ";
				else echo ": ";
				$authoriterator->next();
			}
			#$doctype = $data["documentType"]->get();
			echo "<a href=\"".$this->url($data["frontdoorUrl"])."\">";
			print($data["title"]);
			echo "</a><br/>";
			#echo "(".$doctype["name"].")";
			$this->documentlist->next();
		}
		
	}
	?>