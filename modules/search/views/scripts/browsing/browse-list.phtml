<?php
/**
 * View to browse lists to select filter criteria by click
 *
 * This file is part of OPUS. The software OPUS has been originally developed
 * at the University of Stuttgart with funding from the German Research Net,
 * the Federal Department of Higher Education and Research and the Ministry
 * of Science, Research and the Arts of the State of Baden-Wuerttemberg.
 *
 * OPUS 4 is a complete rewrite of the original OPUS software and was developed
 * by the Stuttgart University Library, the Library Service Center
 * Baden-Wuerttemberg, the Cooperative Library Network Berlin-Brandenburg,
 * the Saarland University and State Library, the Saxon State Library -
 * Dresden State and University Library, the Bielefeld University Library and
 * the University Library of Hamburg University of Technology with funding from
 * the German Research Foundation and the European Regional Development Fund.
 *
 * LICENCE
 * OPUS is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the Licence, or any later version.
 * OPUS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details. You should have received a copy of the GNU General Public License
 * along with OPUS; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * @category    Application
 * @package     Module_Search
 * @author      Oliver Marahrens <o.marahrens@tu-harburg.de>
 * @copyright   Copyright (c) 2008, OPUS 4 development team
 * @license     http://www.gnu.org/licenses/gpl.html General Public License
 * @version     $Id$
 */
    echo '<h2>' . $this->title . '</h2>';
    // Show list view of the selected list

    if ($this->list === "collection")
    {
        // Show name of the current CollectionNode
        echo '<p>' . $this->browsinglist->getName() . '</p>';
    }

    echo '<ul>';
    if ($this->list === "collection")
	{
		#print_r($this->browsinglist->describe());
	    if (in_array('Collections', $this->browsinglist->describe())) {
	    	$subcollections = $this->browsinglist->getCollections();
	    } else {
	    	$subcollections = $this->browsinglist->getSubCollection();
	    }
           foreach ($subcollections as $coll)    {
                // for Collections $this->browsinglist must be the ListIterator of all ChildNodes, not the current node itself...
              echo '<li>';
              echo '<a href=' .
                 $this->url(
                     array(
                         'module'        => 'search',
                         'controller'    => 'browsing',
                         'action'        => 'browseList',
                         'list'          => 'collection',
                         'collection'    => $this->collection,
                         'node'          => $coll->getId()
                     ),
                     null,
                     true
                 ) .
                 '>';
                 echo $coll->getName();
                 echo '</a> (' . count($coll->getEntries()) . ')';
                 echo '</li>';
            }
	}
    if ($this->list === 'persons')
    {
	   foreach ($this->browsinglist as $obj) {
            $pers = $obj->get();
            $titleCount = BrowsingFilter::getPersonTitles($pers['id'], $this->role)->count();
            if ($titleCount > 0) {
                echo '<li>';
             echo '<a href=' .
                 $this->url(
                     array(
                         'module'        => 'search',
                         'controller'    => 'browsing',
                         'action'        => 'browseTitles',
                         'filter'        => $this->role,
                         $this->role     => $pers['id']
                     ),
                     null,
                      true
                 ) .
                 '>';
                 echo $pers['lastName'] . ', ' . $pers['firstName'];
                 echo '</a>';
                 echo ' (' . $titleCount. ')';
                 echo '</li>';
            }
        }
	}
    if ($this->list === 'doctypes')
    {
        foreach ($this->browsinglist as $obj) {
         echo '<li>';
         echo '<a href=' .
         $this->url(
             array(
                 'module'        => 'search',
                 'controller'    => 'browsing',
                 'action'        => 'browseTitles',
                 'filter'        => 'doctype',
                 'doctype'       => $obj
             ),
             null,
             true
         ) .
        '>';
        echo $this->translate($obj);
        echo '</a>';
        echo '</li>';
        }
    }
    echo '</ul>';

    // Show documents in this Collection hierarchy
    if ($this->list === 'collection')
	{
        $documents = array();
        try {
            $documents = $this->browsinglist->getEntries();
            $documents_paginator = Zend_Paginator::factory($documents);
            if ($this->page > 0) {
            	$documents_paginator->setCurrentPageNumber($this->page);
            }
        }
        catch (Exception $e) {
            // presumably this is a collection role
            // no action necessary
        }
	    if (count($documents) > 0) {
            echo $this->paginationControl($documents_paginator, NULL, 'collectionEntries_ItemCount_pagination.phtml');
            foreach ($documents_paginator as $d) {
                $id = $d->getId();
                $doc = new Opus_Search_SearchHit( (int) $id);
                $hit = $doc->getSearchHit();
                $document = $hit->getDocument();
                // print_r($document);
                $authoriterator = new Opus_Search_Iterator_PersonsListIterator($document["author"]);
                echo "<li>";
                #echo $document['author'] . ': ';
                foreach ($authoriterator as $obj) {
                    $pers = $obj->get();
                    echo '<a href=' .
                        $this->url(
                            array(
                                'module'        => 'search',
                                'controller'    => 'browsing',
                                'action'        => 'browseTitles',
                                'filter'        => 'author',
                                'author'        => $pers['id']
                            ),
                            null,
                            true
                        ) .
                    '>';
                    echo $pers["lastName"].", ".$pers["firstName"];
                    echo "</a>";
                    if ($authoriterator->hasNext() === true) echo "; ";
                    else echo ": ";
                }
                #print("<a href=\"".$this->url($document["frontdoorUrl"])."\">".$document["title"]."</a>");
                print('<a href=' .
                    $this->url(
                        array(
                            'module'        => 'frontdoor',
                            'controller'    => 'index',
                            'action'        => 'index',
                            'docId'         => $document['id']
                        ),
                        null,
                        true
                    ) . '>' . $document['title'] . '</a>'
                );
                echo '</li>';
                #echo "<div>".$this->translate('search_titles_relevance').": ".$doc->getRelevance()."<br/>";
                #echo $document["abstract"]."<br/>";
            }
            echo '</ol>';
            echo $this->paginationControl($documents_paginator, 'Sliding', 'searchList_pagination.phtml');
        }
	}